package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/common"
	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/model"
)

// CreateSurflineSite is the resolver for the createSurflineSite field.
func (r *mutationResolver) CreateSurflineSite(ctx context.Context, input model.NewSurflineSite) (*model.SurflineSite, error) {
	context := common.GetContext(ctx)
	surflineSite := &model.SurflineSite{
		Name:       input.Name,
		SurflineID: input.SurflineID,
		URL:        input.URL,
	}
	err := context.Database.Create(&surflineSite).Error
	if err != nil {
		return nil, fmt.Errorf("error creating surfline site: %v", err)
	}
	return surflineSite, nil
}

// SurflineSites is the resolver for the surflineSites field.
func (r *queryResolver) SurflineSites(ctx context.Context) ([]*model.SurflineSite, error) {
	context := common.GetContext(ctx)
	var surflineSites []*model.SurflineSite
	err := context.Database.Find(&surflineSites).Error
	if err != nil {
		return nil, fmt.Errorf("error getting surfline sites: %v", err)
	}
	return surflineSites, nil
}

// GetSurflineSite is the resolver for the getSurflineSite field.
func (r *queryResolver) GetSurflineSite(ctx context.Context, id string) (*model.SurflineSite, error) {
	context := common.GetContext(ctx)
	var surflineSite model.SurflineSite
	err := context.Database.First(&surflineSite, id).Error
	if err != nil {
		return nil, fmt.Errorf("error getting surfline site: %v", err)
	}
	return &surflineSite, nil
}
