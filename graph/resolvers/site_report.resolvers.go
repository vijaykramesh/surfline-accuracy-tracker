package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/common"
	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/generated"
	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/model"
)

// CreateSiteReport is the resolver for the createSiteReport field.
func (r *mutationResolver) CreateSiteReport(ctx context.Context, input model.NewSiteReport) (*model.SiteReport, error) {
	common := common.GetContext(ctx)
	siteReport := &model.SiteReport{
		Email:            input.Email,
		SurflineSiteId:   input.SurflineSiteID,
		SiteReportRating: input.SiteReportRating,
		Timestamp:        input.Timestamp,
	}
	if input.SurflineRating != nil {
		siteReport.SurflineRating = input.SurflineRating
	}
	if input.AccuracyEstimate != nil {
		siteReport.AccuracyEstimate = input.AccuracyEstimate
	}
	err := common.Database.Create(&siteReport).Error
	if err != nil {
		return nil, fmt.Errorf("error creating site report: %v", err)
	}
	return siteReport, nil
}

// SiteReports is the resolver for the siteReports field.
func (r *queryResolver) SiteReports(ctx context.Context) ([]*model.SiteReport, error) {
	common := common.GetContext(ctx)
	var reports []*model.SiteReport
	err := common.Database.Find(&reports).Error
	if err != nil {
		return nil, fmt.Errorf("error getting reports: %v", err)
	}
	return reports, nil
}

// GetSiteReport is the resolver for the getSiteReport field.
func (r *queryResolver) GetSiteReport(ctx context.Context, id string) (*model.SiteReport, error) {
	common := common.GetContext(ctx)
	var siteReport model.SiteReport
	err := common.Database.Where("id = ?", id).First(&siteReport).Error
	if err != nil {
		return nil, fmt.Errorf("error getting site report: %v", err)
	}
	return &siteReport, nil
}

// SurflineSite is the resolver for the surflineSite field.
func (r *siteReportResolver) SurflineSite(ctx context.Context, obj *model.SiteReport) (*model.SurflineSite, error) {
	common := common.GetContext(ctx)
	var surflineSite model.SurflineSite
	err := common.Database.Where("id = ?", obj.SurflineSiteId).First(&surflineSite).Error
	if err != nil {
		return nil, fmt.Errorf("error getting surfline site: %v", err)
	}
	return &surflineSite, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// SiteReport returns generated.SiteReportResolver implementation.
func (r *Resolver) SiteReport() generated.SiteReportResolver { return &siteReportResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type siteReportResolver struct{ *Resolver }
