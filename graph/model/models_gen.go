// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AccuracyEstimate string

const (
	AccuracyEstimateLow    AccuracyEstimate = "LOW"
	AccuracyEstimateMedium AccuracyEstimate = "MEDIUM"
	AccuracyEstimateHigh   AccuracyEstimate = "HIGH"
)

var AllAccuracyEstimate = []AccuracyEstimate{
	AccuracyEstimateLow,
	AccuracyEstimateMedium,
	AccuracyEstimateHigh,
}

func (e AccuracyEstimate) IsValid() bool {
	switch e {
	case AccuracyEstimateLow, AccuracyEstimateMedium, AccuracyEstimateHigh:
		return true
	}
	return false
}

func (e AccuracyEstimate) String() string {
	return string(e)
}

func (e *AccuracyEstimate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccuracyEstimate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccuracyEstimate", str)
	}
	return nil
}

func (e AccuracyEstimate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportRating string

const (
	ReportRatingPoor     ReportRating = "POOR"
	ReportRatingFair     ReportRating = "FAIR"
	ReportRatingGood     ReportRating = "GOOD"
	ReportRatingVeryGood ReportRating = "VERY_GOOD"
	ReportRatingEpic     ReportRating = "EPIC"
)

var AllReportRating = []ReportRating{
	ReportRatingPoor,
	ReportRatingFair,
	ReportRatingGood,
	ReportRatingVeryGood,
	ReportRatingEpic,
}

func (e ReportRating) IsValid() bool {
	switch e {
	case ReportRatingPoor, ReportRatingFair, ReportRatingGood, ReportRatingVeryGood, ReportRatingEpic:
		return true
	}
	return false
}

func (e ReportRating) String() string {
	return string(e)
}

func (e *ReportRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportRating", str)
	}
	return nil
}

func (e ReportRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurflineRating string

const (
	SurflineRatingPoor     SurflineRating = "POOR"
	SurflineRatingFair     SurflineRating = "FAIR"
	SurflineRatingGood     SurflineRating = "GOOD"
	SurflineRatingVeryGood SurflineRating = "VERY_GOOD"
	SurflineRatingEpic     SurflineRating = "EPIC"
)

var AllSurflineRating = []SurflineRating{
	SurflineRatingPoor,
	SurflineRatingFair,
	SurflineRatingGood,
	SurflineRatingVeryGood,
	SurflineRatingEpic,
}

func (e SurflineRating) IsValid() bool {
	switch e {
	case SurflineRatingPoor, SurflineRatingFair, SurflineRatingGood, SurflineRatingVeryGood, SurflineRatingEpic:
		return true
	}
	return false
}

func (e SurflineRating) String() string {
	return string(e)
}

func (e *SurflineRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurflineRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurflineRating", str)
	}
	return nil
}

func (e SurflineRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
