// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewSiteReport struct {
	Email            string            `json:"email"`
	SurflineSiteID   string            `json:"surflineSiteId"`
	SurflineRating   *SurflineRating   `json:"surflineRating,omitempty"`
	SiteReportRating SiteReportRating  `json:"siteReportRating"`
	AccuracyEstimate *AccuracyEstimate `json:"accuracyEstimate,omitempty"`
	Timestamp        int               `json:"timestamp"`
}

type NewSurflineSite struct {
	SurflineID string `json:"surflineId"`
	Name       string `json:"name"`
	URL        string `json:"url"`
}

type AccuracyEstimate string

const (
	AccuracyEstimateLow    AccuracyEstimate = "LOW"
	AccuracyEstimateMedium AccuracyEstimate = "MEDIUM"
	AccuracyEstimateHigh   AccuracyEstimate = "HIGH"
)

var AllAccuracyEstimate = []AccuracyEstimate{
	AccuracyEstimateLow,
	AccuracyEstimateMedium,
	AccuracyEstimateHigh,
}

func (e AccuracyEstimate) IsValid() bool {
	switch e {
	case AccuracyEstimateLow, AccuracyEstimateMedium, AccuracyEstimateHigh:
		return true
	}
	return false
}

func (e AccuracyEstimate) String() string {
	return string(e)
}

func (e *AccuracyEstimate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccuracyEstimate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccuracyEstimate", str)
	}
	return nil
}

func (e AccuracyEstimate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SiteReportRating string

const (
	SiteReportRatingPoor     SiteReportRating = "POOR"
	SiteReportRatingFair     SiteReportRating = "FAIR"
	SiteReportRatingGood     SiteReportRating = "GOOD"
	SiteReportRatingVeryGood SiteReportRating = "VERY_GOOD"
	SiteReportRatingEpic     SiteReportRating = "EPIC"
)

var AllSiteReportRating = []SiteReportRating{
	SiteReportRatingPoor,
	SiteReportRatingFair,
	SiteReportRatingGood,
	SiteReportRatingVeryGood,
	SiteReportRatingEpic,
}

func (e SiteReportRating) IsValid() bool {
	switch e {
	case SiteReportRatingPoor, SiteReportRatingFair, SiteReportRatingGood, SiteReportRatingVeryGood, SiteReportRatingEpic:
		return true
	}
	return false
}

func (e SiteReportRating) String() string {
	return string(e)
}

func (e *SiteReportRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SiteReportRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SiteReportRating", str)
	}
	return nil
}

func (e SiteReportRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurflineRating string

const (
	SurflineRatingPoor     SurflineRating = "POOR"
	SurflineRatingFair     SurflineRating = "FAIR"
	SurflineRatingGood     SurflineRating = "GOOD"
	SurflineRatingVeryGood SurflineRating = "VERY_GOOD"
	SurflineRatingEpic     SurflineRating = "EPIC"
)

var AllSurflineRating = []SurflineRating{
	SurflineRatingPoor,
	SurflineRatingFair,
	SurflineRatingGood,
	SurflineRatingVeryGood,
	SurflineRatingEpic,
}

func (e SurflineRating) IsValid() bool {
	switch e {
	case SurflineRatingPoor, SurflineRatingFair, SurflineRatingGood, SurflineRatingVeryGood, SurflineRatingEpic:
		return true
	}
	return false
}

func (e SurflineRating) String() string {
	return string(e)
}

func (e *SurflineRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurflineRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurflineRating", str)
	}
	return nil
}

func (e SurflineRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
