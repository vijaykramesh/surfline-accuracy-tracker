package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/vijaykramesh/surfline-accuracy-tracker/graph/model"
)

// CreateSurflineSite is the resolver for the createSurflineSite field.
func (r *mutationResolver) CreateSurflineSite(ctx context.Context, input model.NewSurflineSite) (*model.SurflineSite, error) {
	surflineSite := model.SurflineSite{
		SurflineID: input.SurflineID,
		Name:       input.Name,
		URL:        input.URL,
	}
	_, err := r.DB.Model(&surflineSite).Insert()
	if err != nil {
		return nil, fmt.Errorf("error creating surfline site: %v", err)
	}
	return &surflineSite, nil
}

// CreateReport is the resolver for the createReport field.
func (r *mutationResolver) CreateReport(ctx context.Context, input model.NewReport) (*model.Report, error) {
	report := model.Report{
		Email:        input.Email,
		ReportRating: input.ReportRating,
		Timestamp:    input.Timestamp,
	}
	// lookup surflineSite for the passed in SurflineSiteID, error if not found
	surflineSite := model.SurflineSite{ID: input.SurflineSiteID}
	err := r.DB.Model(&surflineSite).WherePK().Select()
	if err != nil {
		return nil, fmt.Errorf("error getting surfline site: %v", err)
	}
	report.SurflineSiteID = input.SurflineSiteID

	if input.SurflineRating != nil {
		report.SurflineRating = input.SurflineRating
	}
	if input.AccuracyEstimate != nil {
		report.AccuracyEstimate = input.AccuracyEstimate
	}
	_, err = r.DB.Model(&report).Insert()
	if err != nil {
		return nil, fmt.Errorf("error creating report: %v", err)
	}
	return &report, nil
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context) ([]*model.Report, error) {
	var reports []*model.Report
	err := r.DB.Model(&reports).Select()
	if err != nil {
		return nil, fmt.Errorf("error getting reports: %v", err)
	}
	return reports, nil
}

// SurflineSites is the resolver for the surflineSites field.
func (r *queryResolver) SurflineSites(ctx context.Context) ([]*model.SurflineSite, error) {
	var surflineSites []*model.SurflineSite
	err := r.DB.Model(&surflineSites).Select()
	if err != nil {
		return nil, fmt.Errorf("error getting surfline sites: %v", err)
	}
	return surflineSites, nil
}

// GetReport is the resolver for the getReport field.
func (r *queryResolver) GetReport(ctx context.Context, id string) (*model.Report, error) {
	report := model.Report{ID: id}
	err := r.DB.Model(&report).WherePK().Select()
	if err != nil {
		return nil, fmt.Errorf("error getting report: %v", err)
	}
	return &report, nil
}

// GetSurflineSite is the resolver for the getSurflineSite field.
func (r *queryResolver) GetSurflineSite(ctx context.Context, id string) (*model.SurflineSite, error) {
	surflineSite := model.SurflineSite{ID: id}
	err := r.DB.Model(&surflineSite).WherePK().Select()
	if err != nil {
		return nil, fmt.Errorf("error getting surfline site: %v", err)
	}
	return &surflineSite, nil
}

// SurflineSite is the resolver for the surflineSite field.
func (r *reportResolver) SurflineSite(ctx context.Context, obj *model.Report) (*model.SurflineSite, error) {
	surflineSite := model.SurflineSite{ID: obj.SurflineSiteID}
	err := r.DB.Model(&surflineSite).WherePK().Select()
	if err != nil {
		return nil, fmt.Errorf("error getting surfline site: %v", err)
	}
	return &surflineSite, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Report returns ReportResolver implementation.
func (r *Resolver) Report() ReportResolver { return &reportResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type reportResolver struct{ *Resolver }
